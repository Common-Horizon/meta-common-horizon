From 236ed4fecd5033a65ef095e7419979f087ed0576 Mon Sep 17 00:00:00 2001
From: Sergio Prado <sergio.prado@toradex.com>
Date: Wed, 14 Oct 2020 13:56:36 +0000
Subject: [PATCH] Integrate Docker Compose with Aktualizr

When an docker-compose file update is received via a secondary, run
docker-compose commands to pull and start the new containers.

The process occurs in the background without the need to reboot the device.

If an error occurs during the process, the update is rolled back to the
previous docker-compose file.

Signed-off-by: Sergio Prado <sergio.prado@toradex.com>
---
 src/aktualizr_primary/CMakeLists.txt          |  4 +-
 src/aktualizr_primary/command_runner.cc       |  9 +++
 src/aktualizr_primary/command_runner.h        | 14 ++++
 src/aktualizr_primary/compose_manager.cc      | 75 +++++++++++++++++++
 src/aktualizr_primary/compose_manager.h       | 30 ++++++++
 src/virtual_secondary/CMakeLists.txt          |  2 +-
 .../dockercomposesecondary.cc                 | 31 ++++++++
 .../dockercomposesecondary.h                  |  1 +
 8 files changed, 163 insertions(+), 3 deletions(-)
 create mode 100644 src/aktualizr_primary/command_runner.cc
 create mode 100644 src/aktualizr_primary/command_runner.h
 create mode 100644 src/aktualizr_primary/compose_manager.cc
 create mode 100644 src/aktualizr_primary/compose_manager.h

diff --git a/src/aktualizr_primary/CMakeLists.txt b/src/aktualizr_primary/CMakeLists.txt
index df41795cdd79..a3d3be2d88cb 100644
--- a/src/aktualizr_primary/CMakeLists.txt
+++ b/src/aktualizr_primary/CMakeLists.txt
@@ -1,5 +1,5 @@
-set(SOURCES main.cc secondary_config.cc secondary.cc update_events.cc update_lock.cc)
-set(HEADERS secondary_config.h secondary.h update_events.h update_lock.h)
+set(SOURCES main.cc secondary_config.cc secondary.cc update_events.cc update_lock.cc command_runner.cc compose_manager.cc)
+set(HEADERS secondary_config.h secondary.h update_events.h update_lock.h command_runner.h compose_manager.h)
 
 add_executable(aktualizr ${SOURCES})
 target_link_libraries(aktualizr aktualizr_lib virtual_secondary aktualizr-posix)
diff --git a/src/aktualizr_primary/command_runner.cc b/src/aktualizr_primary/command_runner.cc
new file mode 100644
index 000000000000..f47fde5a0098
--- /dev/null
+++ b/src/aktualizr_primary/command_runner.cc
@@ -0,0 +1,9 @@
+#include <boost/process.hpp>
+
+#include "command_runner.h"
+#include "logging/logging.h"
+
+bool CommandRunner::run(const std::string& cmd) {
+  LOG_INFO << "Running command: " << cmd;
+  return boost::process::system(cmd) == 0;
+}
diff --git a/src/aktualizr_primary/command_runner.h b/src/aktualizr_primary/command_runner.h
new file mode 100644
index 000000000000..f84bd3b207de
--- /dev/null
+++ b/src/aktualizr_primary/command_runner.h
@@ -0,0 +1,14 @@
+#ifndef COMMAND_RUNNER_H_
+#define COMMAND_RUNNER_H_
+
+#include <string>
+
+class CommandRunner {
+
+ public:
+  CommandRunner() {}
+
+  bool run(const std::string& cmd);
+};
+
+#endif  // COMMAND_RUNNER_H_
diff --git a/src/aktualizr_primary/compose_manager.cc b/src/aktualizr_primary/compose_manager.cc
new file mode 100644
index 000000000000..7bd805fb5c2c
--- /dev/null
+++ b/src/aktualizr_primary/compose_manager.cc
@@ -0,0 +1,75 @@
+#include "compose_manager.h"
+#include "logging/logging.h"
+
+ComposeManager::ComposeManager(const std::string &compose_file_current, const std::string &compose_file_new) {
+  compose_file_current_ = compose_file_current;
+  compose_file_new_ = compose_file_new;
+  compose_cmd_  = compose_program_ + " --file ";
+}
+
+bool ComposeManager::pull(const std::string &compose_file) {
+  LOG_INFO << "Running docker-compose pull";
+  return cmd.run(compose_cmd_ + compose_file + " pull --no-parallel");
+}
+
+bool ComposeManager::up(const std::string &compose_file) {
+  LOG_INFO << "Running docker-compose up";
+  return cmd.run(compose_cmd_ + compose_file + " -p torizon up --detach --remove-orphans");
+}
+
+bool ComposeManager::down(const std::string &compose_file) {
+  LOG_INFO << "Running docker-compose down";
+  return cmd.run(compose_cmd_ + compose_file + " -p torizon down");
+}
+
+bool ComposeManager::cleanup() {
+  LOG_INFO << "Removing not used containers, networks and images";
+  return cmd.run("docker system prune -a --force");
+}
+
+bool ComposeManager::update() {
+
+  LOG_INFO << "Updating containers via docker-compose";
+
+  containers_stopped = false;
+
+  if (pull(compose_file_new_) == false) {
+    LOG_ERROR << "Error running docker-compose pull";
+    return false;
+  }
+
+  if (!access(compose_file_current_.c_str(), F_OK)) {
+    if (down(compose_file_current_) == false) {
+      LOG_ERROR << "Error running docker-compose down";
+      return false;
+    }
+    containers_stopped = true;
+  }
+
+  if (up(compose_file_new_) == false) {
+    LOG_ERROR << "Error running docker-compose up";
+    return false;
+  }
+
+  rename(compose_file_new_.c_str(), compose_file_current_.c_str());
+
+  cleanup();
+
+  return true;
+}
+
+bool ComposeManager::roolback() {
+
+  LOG_INFO << "Rolling back container update";
+
+  if (containers_stopped == true) {
+    up(compose_file_current_);
+    containers_stopped = false;
+  }
+
+  remove(compose_file_new_.c_str());
+
+  cleanup();
+
+  return true;
+}
diff --git a/src/aktualizr_primary/compose_manager.h b/src/aktualizr_primary/compose_manager.h
new file mode 100644
index 000000000000..0b7ad204fd64
--- /dev/null
+++ b/src/aktualizr_primary/compose_manager.h
@@ -0,0 +1,30 @@
+#ifndef COMPOSE_MANAGER_H_
+#define COMPOSE_MANAGER_H_
+
+#include <string>
+#include "command_runner.h"
+
+class ComposeManager {
+
+  const std::string compose_program_ = "/usr/bin/docker-compose";
+  std::string compose_file_current_;
+  std::string compose_file_new_;
+  std::string compose_cmd_;
+  bool containers_stopped;
+
+  CommandRunner cmd;
+
+  bool pull(const std::string &compose_file);
+  bool up(const std::string &compose_file);
+  bool down(const std::string &compose_file);
+
+  bool cleanup();
+
+ public:
+  ComposeManager(const std::string &compose_file_current, const std::string &compose_file_new);
+
+  bool update();
+  bool roolback();
+};
+
+#endif  // COMPOSE_MANAGER_H_
diff --git a/src/virtual_secondary/CMakeLists.txt b/src/virtual_secondary/CMakeLists.txt
index ce117d4f543a..a5d1315a5ab0 100644
--- a/src/virtual_secondary/CMakeLists.txt
+++ b/src/virtual_secondary/CMakeLists.txt
@@ -8,7 +8,7 @@ add_library(${TARGET} STATIC
   ${SOURCES}
 )
 
-target_include_directories(${TARGET} PUBLIC ${PROJECT_SOURCE_DIR}/src/virtual_secondary)
+target_include_directories(${TARGET} PUBLIC ${PROJECT_SOURCE_DIR}/src/virtual_secondary ${PROJECT_SOURCE_DIR}/src/aktualizr_primary)
 
 add_aktualizr_test(NAME virtual_secondary SOURCES virtual_secondary_test.cc PROJECT_WORKING_DIRECTORY LIBRARIES uptane_generator_lib)
 target_link_libraries(t_virtual_secondary virtual_secondary)
diff --git a/src/virtual_secondary/dockercomposesecondary.cc b/src/virtual_secondary/dockercomposesecondary.cc
index 08d4c19a61d3..166dcd3f61d8 100644
--- a/src/virtual_secondary/dockercomposesecondary.cc
+++ b/src/virtual_secondary/dockercomposesecondary.cc
@@ -4,6 +4,7 @@
 #include "logging/logging.h"
 #include "utilities/fault_injection.h"
 #include "utilities/utils.h"
+#include "compose_manager.h"
 
 #include <sstream>
 
@@ -70,6 +71,36 @@ void DockerComposeSecondaryConfig::dump(const boost::filesystem::path& file_full
 DockerComposeSecondary::DockerComposeSecondary(Primary::DockerComposeSecondaryConfig sconfig_in)
     : ManagedSecondary(std::move(sconfig_in)) {}
 
+data::InstallationResult DockerComposeSecondary::install(const Uptane::Target &target) {
+  auto str = secondary_provider_->getTargetFileHandle(target);
+
+  /* Here we try to make container updates "as atomic as possible". So we save
+   * the updated docker-compose file with another name (<firmware_path>.tmp), run
+   * docker-compose commands to pull and run the containers, and if it fails
+   * we still have the previous docker-compose file to "roolback" to the current
+   * version of the containers.
+   */
+
+  std::string compose_file = sconfig.firmware_path.string();
+  std::string compose_file_new = compose_file + ".tmp";
+
+  std::ofstream out_file(compose_file_new, std::ios::binary);
+  out_file << str.rdbuf();
+  str.close();
+  out_file.close();
+
+  ComposeManager compose = ComposeManager(compose_file, compose_file_new);
+
+  if (compose.update() == true) {
+    Utils::writeFile(sconfig.target_name_path, target.filename());
+    return data::InstallationResult(data::ResultCode::Numeric::kOk, "");
+  }
+  else {
+    compose.roolback();
+    return data::InstallationResult(data::ResultCode::Numeric::kInstallFailed, "");
+  }
+}
+
 bool DockerComposeSecondary::getFirmwareInfo(Uptane::InstalledImageInfo& firmware_info) const {
   std::string content;
 
diff --git a/src/virtual_secondary/dockercomposesecondary.h b/src/virtual_secondary/dockercomposesecondary.h
index b9d7b15463fb..03b50c4e1a69 100644
--- a/src/virtual_secondary/dockercomposesecondary.h
+++ b/src/virtual_secondary/dockercomposesecondary.h
@@ -34,6 +34,7 @@ class DockerComposeSecondary : public ManagedSecondary {
 
  private:
   bool getFirmwareInfo(Uptane::InstalledImageInfo& firmware_info) const override;
+  data::InstallationResult install(const Uptane::Target &target) override;
 };
 
 }  // namespace Primary
-- 
2.17.1

