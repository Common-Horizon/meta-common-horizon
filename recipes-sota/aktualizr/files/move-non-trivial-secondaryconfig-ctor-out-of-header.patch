From 05414e4deb72ecf9ce8e5b92f3265308db90c20f Mon Sep 17 00:00:00 2001
From: Phil Wise <phil@phil-wise.com>
Date: Fri, 4 Jan 2019 15:07:15 +0000
Subject: [PATCH] Move non-trivial SecondaryConfig ctor out of header

I think this code will get more complex when adding Docker support, and now
seems like a good time to get the definition out of the header file.

Signed-off-by: Phil Wise <phil@phil-wise.com>
---
 src/libaktualizr/uptane/CMakeLists.txt     |  1 +
 src/libaktualizr/uptane/secondaryconfig.cc | 46 ++++++++++++++++++++++
 src/libaktualizr/uptane/secondaryconfig.h  | 43 +-------------------
 3 files changed, 48 insertions(+), 42 deletions(-)
 create mode 100644 src/libaktualizr/uptane/secondaryconfig.cc

diff --git a/src/libaktualizr/uptane/CMakeLists.txt b/src/libaktualizr/uptane/CMakeLists.txt
index 7d441547f..dda461eed 100644
--- a/src/libaktualizr/uptane/CMakeLists.txt
+++ b/src/libaktualizr/uptane/CMakeLists.txt
@@ -5,6 +5,7 @@ set(SOURCES fetcher.cc
     partialverificationsecondary.cc
     role.cc
     root.cc
+    secondaryconfig.cc
     tuf.cc
     uptanerepository.cc
     directorrepository.cc
diff --git a/src/libaktualizr/uptane/secondaryconfig.cc b/src/libaktualizr/uptane/secondaryconfig.cc
new file mode 100644
index 000000000..c974e4630
--- /dev/null
+++ b/src/libaktualizr/uptane/secondaryconfig.cc
@@ -0,0 +1,46 @@
+#include "uptane/secondaryconfig.h"
+
+namespace Uptane {
+SecondaryConfig::SecondaryConfig(const boost::filesystem::path &config_file) {
+  if (!boost::filesystem::exists(config_file)) {
+    throw FatalException(config_file.string() + " does not exist!");
+  }
+  Json::Value config_json = Utils::parseJSONFile(config_file);
+
+  std::string stype = config_json["secondary_type"].asString();
+  if (stype == "virtual") {
+    secondary_type = Uptane::SecondaryType::kVirtual;
+  } else if (stype == "legacy") {
+    throw FatalException("Legacy secondaries are deprecated.");
+  } else if (stype == "ip_uptane") {
+    secondary_type = Uptane::SecondaryType::kIpUptane;
+  } else if (stype == "opcua_uptane") {
+    secondary_type = Uptane::SecondaryType::kOpcuaUptane;
+  } else {
+    LOG_ERROR << "Unrecognized secondary type: " << stype;
+  }
+  ecu_serial = config_json["ecu_serial"].asString();
+  ecu_hardware_id = config_json["ecu_hardware_id"].asString();
+  partial_verifying = config_json["partial_verifying"].asBool();
+  ecu_private_key = config_json["ecu_private_key"].asString();
+  ecu_public_key = config_json["ecu_public_key"].asString();
+
+  full_client_dir = boost::filesystem::path(config_json["full_client_dir"].asString());
+  firmware_path = boost::filesystem::path(config_json["firmware_path"].asString());
+  metadata_path = boost::filesystem::path(config_json["metadata_path"].asString());
+  target_name_path = boost::filesystem::path(config_json["target_name_path"].asString());
+
+  std::string key_type_str = config_json["key_type"].asString();
+  if (key_type_str.size() != 0u) {
+    if (key_type_str == "RSA2048") {
+      key_type = KeyType::kRSA2048;
+    } else if (key_type_str == "RSA3072") {
+      key_type = KeyType::kRSA3072;
+    } else if (key_type_str == "RSA4096") {
+      key_type = KeyType::kRSA4096;
+    } else if (key_type_str == "ED25519") {
+      key_type = KeyType::kED25519;
+    }
+  }
+}
+}  // namespace Uptane
\ No newline at end of file
diff --git a/src/libaktualizr/uptane/secondaryconfig.h b/src/libaktualizr/uptane/secondaryconfig.h
index e621603bb..41048147c 100644
--- a/src/libaktualizr/uptane/secondaryconfig.h
+++ b/src/libaktualizr/uptane/secondaryconfig.h
@@ -28,48 +28,7 @@ enum class SecondaryType {
 class SecondaryConfig {
  public:
   SecondaryConfig() = default;
-  SecondaryConfig(const boost::filesystem::path &config_file) {
-    if (!boost::filesystem::exists(config_file)) {
-      throw FatalException(config_file.string() + " does not exist!");
-    }
-    Json::Value config_json = Utils::parseJSONFile(config_file);
-
-    std::string stype = config_json["secondary_type"].asString();
-    if (stype == "virtual") {
-      secondary_type = Uptane::SecondaryType::kVirtual;
-    } else if (stype == "legacy") {
-      throw FatalException("Legacy secondaries are deprecated.");
-    } else if (stype == "ip_uptane") {
-      secondary_type = Uptane::SecondaryType::kIpUptane;
-    } else if (stype == "opcua_uptane") {
-      secondary_type = Uptane::SecondaryType::kOpcuaUptane;
-    } else {
-      LOG_ERROR << "Unrecognized secondary type: " << stype;
-    }
-    ecu_serial = config_json["ecu_serial"].asString();
-    ecu_hardware_id = config_json["ecu_hardware_id"].asString();
-    partial_verifying = config_json["partial_verifying"].asBool();
-    ecu_private_key = config_json["ecu_private_key"].asString();
-    ecu_public_key = config_json["ecu_public_key"].asString();
-
-    full_client_dir = boost::filesystem::path(config_json["full_client_dir"].asString());
-    firmware_path = boost::filesystem::path(config_json["firmware_path"].asString());
-    metadata_path = boost::filesystem::path(config_json["metadata_path"].asString());
-    target_name_path = boost::filesystem::path(config_json["target_name_path"].asString());
-
-    std::string key_type_str = config_json["key_type"].asString();
-    if (key_type_str.size() != 0u) {
-      if (key_type_str == "RSA2048") {
-        key_type = KeyType::kRSA2048;
-      } else if (key_type_str == "RSA3072") {
-        key_type = KeyType::kRSA3072;
-      } else if (key_type_str == "RSA4096") {
-        key_type = KeyType::kRSA4096;
-      } else if (key_type_str == "ED25519") {
-        key_type = KeyType::kED25519;
-      }
-    }
-  }
+  SecondaryConfig(const boost::filesystem::path &config_file);
   SecondaryType secondary_type{};
   std::string ecu_serial;
   std::string ecu_hardware_id;
