From 16dae4f143b7a183f49590f40bae90f44d8270da Mon Sep 17 00:00:00 2001
From: Ming Liu <liu.ming50@gmail.com>
Date: Tue, 12 Mar 2019 12:36:29 +0100
Subject: [PATCH] Implement arm_sync_file_range and SyncFileRange wrapper for
 ARM

Upstream-status: Pending

Signed-off-by: Andrei Gherzan <andrei@resin.io>
Signed-off-by: Stefan Agner <stefan.agner@toradex.com>
Signed-off-by: Ming Liu <liu.ming50@gmail.com>
---
 src/syscall/syscall_linux_arm.go  |  5 +++++
 src/syscall/zsyscall_linux_arm.go | 10 ++++++++++
 2 files changed, 15 insertions(+)

diff --git a/src/syscall/syscall_linux_arm.go b/src/syscall/syscall_linux_arm.go
index 6554319..a5d85e9 100644
--- a/src/syscall/syscall_linux_arm.go
+++ b/src/syscall/syscall_linux_arm.go
@@ -106,6 +106,11 @@ func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {
 
 //sys	mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error)
 //sys	EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)
+//sys  ArmSyncFileRange(fd int, flags int, off int64, n int64) (err error)
+
+func SyncFileRange(fd int, off int64, n int64, flags int) (err error) {
+	return ArmSyncFileRange(fd, flags, off, n)
+}
 
 func Stat(path string, stat *Stat_t) (err error) {
 	return fstatat(_AT_FDCWD, path, stat, 0)
diff --git a/src/syscall/zsyscall_linux_arm.go b/src/syscall/zsyscall_linux_arm.go
index 3d099aa..cf779b6 100644
--- a/src/syscall/zsyscall_linux_arm.go
+++ b/src/syscall/zsyscall_linux_arm.go
@@ -1636,6 +1636,16 @@ func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func ArmSyncFileRange(fd int, flags int, off int64, n int64) (err error) {
+	_, _, e1 := Syscall6(SYS_ARM_SYNC_FILE_RANGE, uintptr(fd), uintptr(flags), uintptr(off), uintptr(off>>32), uintptr(n), uintptr(n>>32))
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func getrlimit(resource int, rlim *rlimit32) (err error) {
 	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
 	if e1 != 0 {
-- 
2.7.4

