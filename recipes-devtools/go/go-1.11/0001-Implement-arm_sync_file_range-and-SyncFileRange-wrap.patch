From 17ec65d74ec39038732709cc8f2b97314ac61869 Mon Sep 17 00:00:00 2001
From: Stefan Agner <stefan.agner@toradex.com>
Date: Tue, 27 Nov 2018 15:07:22 +0000
Subject: [PATCH] Implement arm_sync_file_range and SyncFileRange wrapper for
 ARM

Signed-off-by: Andrei Gherzan <andrei@resin.io>
Signed-off-by: Stefan Agner <stefan.agner@toradex.com>
Upstream-status: Pending
---
 src/syscall/syscall_linux_arm.go  |  5 +++++
 src/syscall/zsyscall_linux_arm.go | 10 ++++++++++
 2 files changed, 15 insertions(+)

diff --git a/src/syscall/syscall_linux_arm.go b/src/syscall/syscall_linux_arm.go
index b0c0ac7..b53b7bd 100644
--- a/src/syscall/syscall_linux_arm.go
+++ b/src/syscall/syscall_linux_arm.go
@@ -109,6 +109,11 @@ func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {
 
 //sys	mmap2(addr uintptr, length uintptr, prot int, flags int, fd int, pageOffset uintptr) (xaddr uintptr, err error)
 //sys	EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)
+//sys	ArmSyncFileRange(fd int, flags int, off int64, n int64) (err error)
+
+func SyncFileRange(fd int, off int64, n int64, flags int) (err error) {
+	return ArmSyncFileRange(fd, flags, off, n)
+}
 
 func Fstatfs(fd int, buf *Statfs_t) (err error) {
 	_, _, e := Syscall(SYS_FSTATFS64, uintptr(fd), unsafe.Sizeof(*buf), uintptr(unsafe.Pointer(buf)))
diff --git a/src/syscall/zsyscall_linux_arm.go b/src/syscall/zsyscall_linux_arm.go
index bb20d6e..c4ec850 100644
--- a/src/syscall/zsyscall_linux_arm.go
+++ b/src/syscall/zsyscall_linux_arm.go
@@ -1681,6 +1681,16 @@ func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func ArmSyncFileRange(fd int, flags int, off int64, n int64) (err error) {
+	_, _, e1 := Syscall6(SYS_ARM_SYNC_FILE_RANGE, uintptr(fd), uintptr(flags), uintptr(off), uintptr(off>>32), uintptr(n), uintptr(n>>32))
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func getrlimit(resource int, rlim *rlimit32) (err error) {
 	_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
 	if e1 != 0 {
-- 
2.13.6

